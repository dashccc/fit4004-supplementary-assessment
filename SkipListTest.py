'''
Created on 3 Aug 2016

@author: Wanyu Yin
@version: Python 2.7
'''
from mock import patch
import unittest
from skiplist import SkipList

class SkipListTest(unittest.TestCase):
    def setUp(self):
        self.skiplist = SkipList()
        self.aNode = [None, None, None, None]

    def test_makeNode(self):
        '''
        Test if the _makeNode method can generate the right list [None, None, None, None]
        '''
        self.assertEqual(self.aNode, self.skiplist._makeNode(0, None, None))
        
    def test_makeNode_notEqual(self):
        '''
        Test if the list [None, None, None] generated by _makeNode method is not equal to list [None, None, None, None]
        '''
        self.assertNotEqual(self.aNode, self.skiplist._makeNode(-1, None, None))
    
    #test _randomLevel
    @patch('random.random')
    def test_randomLevel(self, mock_rand):
        '''
        Test when random mock result is 0, the return value by _randomLevel is 1
        '''
        mock_rand.return_value = 0
        self.assertEqual(1, self.skiplist._randomLevel())
        
    @patch('random.random')
    def test_randomLevel_notEqual(self, mock_rand):
        '''
        Test when random mock result is 0, the return value 1 by _randomLevel is not equal to 0
        '''
        mock_rand.return_value = 0
        self.assertNotEqual(0, self.skiplist._randomLevel())
        
    def test_findLess(self):
        self.skiplist.head[3] = [1,[3,4],[5,6],[[7,0],[8,0],[None,0]]]
        result = self.skiplist._findLess(self.skiplist._update, 5)
        self.assertEqual([1, [3, 4], [5, 6], [[7, 0], [8, 0], [None, 0]]], result)
       
    def test_items(self):
        test_array = []
        self.skiplist.head[3] = [1,[3,4],[5,6],[[7,0],[8,0],[None,0]]]
        for item in self.skiplist.items(5, True):
            test_array.append(item)
        self.assertEqual([([7, 0], [8, 0])], test_array)
        
    def test_items_no_args(self):
        test_array = []
        for item in self.skiplist.items():
            test_array.append(item)
        self.assertEqual([], test_array)
        
    def test_items_reverse_true(self):
        test_array = []
        for item in self.skiplist.items(None, True):
            test_array.append(item)
        self.assertEqual([], test_array)
        
    def test_insert(self):
        pass
    
    def test_insert_no_searchKey(self):
        pass
    
    def test_insert_no_value(self):
        pass
        

if __name__ == '__main__':
    unittest.main()        
